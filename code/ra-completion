#!/usr/bin/perl
use strict;
use warnings;

use File::Pid;
use JSON;

use lib '/code/lib';
use RAB::Sprites;
use RAB::RAAPI;
use RAB::Twitter;
use RAB::SQL;

binmode(STDOUT, ":utf8");

#
# Variables initialization
#

my $codedir       = '/code';
my $spritesdir    = $codedir . '/sprites';
my $testdir       = $codedir . '/data/test';

my $daemonName    = "ra-completion";
my $dieNow        = 0;                                     # used for "infinte loop" construct - allows daemon mode to gracefully exit
my $sleepMainLoop = 300;                                   # number of seconds to wait between "do something" execution after queue is clear
my $logging       = 1;                                     # 1= logging is on
my $pidFilePath   = "/var/run/";                           # PID file path
my $pidFile       = $pidFilePath . $daemonName . ".pid";

# Funny stuff
my $EMOJIko = "\e[31m".':o('."\e[0m";
my $EMOJIok = "\e[32m".':o)'."\e[0m";

# daemonize
chdir '/';
umask 0;

# callback signal handler for signals.
$SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
$SIG{PIPE} = 'ignore';

# create pid file in /var/run/
my $pidfile = File::Pid->new( { file => $pidFile, } );
   $pidfile->write or die "Can't write PID file, /dev/null: $!";

logEntry("=====");
logEntry("Starting daemon");

logEntry("exec: initDB");
`perl $codedir/data/initDB.pl`;

my $loop;
# "infinite" loop where some useful process happens
until ($dieNow) {
    $loop++;
    logEntry("$EMOJIok Entering loop $loop");

    my @twitter_users;
    eval
    {
        logEntry("[SYSTEM] RAB::SQL::GetTwitterUsers");
        @twitter_users = RAB::SQL::GetTwitterUsers;
    } or do {
        my $error = $@ || 'Unknown failure';
        chomp ($error);
        logEntry("[SYSTEM] RAB::SQL::GetTwitterUsers FAIL: $error");
        next;
    };

    eval
    {
        logEntry("[SYSTEM] RAB::Twitter::getMentions");
        RAB::Twitter::getMentions;
    } or do {
        my $error = $@ || 'Unknown failure';
        chomp ($error);
        logEntry("[SYSTEM] RAB::Twitter::getMentions FAIL: $error");
        next;
    };

    my %Mentions;
    eval
    {
        logEntry("[SYSTEM] RAB::SQL::getMentions");
        %Mentions = RAB::SQL::getMentions;
    } or do {
        my $error = $@ || 'Unknown failure';
        chomp ($error);
        logEntry("[SYSTEM] RAB::SQL::getMentions FAIL: $error");
        last;
    };

    foreach my $id ( sort keys %Mentions )
    {
        if ( $Mentions{$id}{'replied'} )
        { #We don't do this one
        }
        else
        {
            if ( $Mentions{$id}{'twitt_text'} =~ m/REGISTER !(\w*)/ )
            {
                my $username = $1;
                my $user_tw  =  RAB::Twitter::SenderName($Mentions{$id}{'sender_id'}) or die "Failed to SenderName $!";

                logEntry("[\@$user_tw] Got to reply" );

                if (! grep( /^$user_tw$/, @twitter_users ))
                {
                    RAB::SQL::CreateTwitterUser($Mentions{$id}{'sender_id'},$user_tw,'');
                    logEntry("[\@$user_tw] Added in DB ($Mentions{$id}{'sender_id'},$user_tw)");
                }
                else
                {
                    logEntry("[\@$user_tw] Already in DB ($Mentions{$id}{'sender_id'},\@$user_tw)");
                }

                my $ack = RAB::SQL::GetAck("$user_tw") or die "[\@$user_tw] Failed to GetAck $!";

                if ( $ack ne 'yes' )
                {
                    my $user_ra = $username;
                    my $return  = RAB::RAAPI::GetUserRankAndScore($user_ra);

                    if ($return)
                    {
                        if ( $return eq '{"Score":0,"Rank":"1"}' )
                        {
                            logEntry("[\@$user_tw] '$user_ra' Not registered on RA, or shit happened");

                            if ( $ack eq 'fail' )
                            {
                                 logEntry("[\@$user_tw] Already sent fail registration DM. I did nothing.");
                            }
                            else
                            {
                                my $tweet = "I couldn't find your username '$user_ra' on RA.org. Check it out, and come back to me.";

                                RAB::Twitter::SendTweet($id, $tweet);
                                RAB::SQL::SetAck($user_tw, 'fail');
                            }
                        }
                        else
                        {
                            logEntry("[\@$user_tw] Registered on RA ($user_ra), sending ACK Tweet");

                            my $text         = "\@" . $user_tw . " Kudos. You're now associated with the RetroAchievement account : $user_ra";

                            RAB::Twitter::SendTweet($id, $text);
                            RAB::SQL::StoreTwittReplied($Mentions{$id}{'twitt_id'});
                            RAB::SQL::AddRAUser($user_tw,$user_ra);
                        }
                    }
                }
            }
        }
    }

    my $USERS;
    eval
    {
        $USERS = RAB::SQL::GetRegisteredUsers;
        logEntry( "[SYSTEM] RAB::SQL::GetRegisteredUsers DONE");
    } or do {
        my $error = $@ || 'Unknown failure';
        chomp ($error);
        logEntry("[SYSTEM] RAB::SQL::GetRegisteredUsers FAIL: $error");
    };

    foreach my $user_id ( keys %{$USERS} )
    {
        my $user_tw = $USERS->{$user_id}{'user_twitter'};
        my $user_ra = $USERS->{$user_id}{'user_ra'};

        my $return;
        eval
        {
            $return = RAB::RAAPI::GetUserRecentlyPlayedGames($user_ra);
            logEntry( "[\@$user_tw:$user_ra] RAB::RAAPI::GetUserRecentlyPlayedGames($user_ra) DONE");
        } or do {
            my $error = $@ || 'Unknown failure';
            chomp ($error);
            logEntry("[\@$user_tw:$user_ra] RAB::RAAPI::GetUserRecentlyPlayedGames($user_ra) FAIL: $error");
        };

        if ($return)
        {
            my $JSON = decode_json($return);
            my %X;
            my @csv;

            my $max = scalar @{$JSON}; # Because I'm not sure I'll receive 10 last played games
            for (my $i = 0; $i < $max; $i++) # And we loop
            {
                push @csv, $JSON->[$i]->{GameID};
                $X{$JSON->[$i]->{GameID}} = $i;
            }

            my $retprogress;
            eval
            {
                $retprogress = RAB::RAAPI::GetUserProgress($user_ra,\@csv);
                logEntry( "[\@$user_tw:$user_ra] RAB::RAAPI::GetUserProgress($user_ra,\@csv) DONE");
            } or do {
                my $error = $@ || 'Unknown failure';
                chomp ($error);
                logEntry("[\@$user_tw:$user_ra] RAB::RAAPI::GetUserProgress($user_ra,\@csv) FAIL: $error");
            };

            foreach my $id ( keys %{$retprogress} )
            {
                my $kudos_end;
                my $goodtogo;
                my $achieved;
                my $score;
                my $mode;
                my $gamePercent;

                my $NumPossibleAchievements = $retprogress->{$id}->{NumPossibleAchievements};
                my $ScoreAchievedHardcore   = $retprogress->{$id}->{ScoreAchievedHardcore};
                my $NumAchievedHardcore     = $retprogress->{$id}->{NumAchievedHardcore};
                my $ScoreAchieved           = $retprogress->{$id}->{ScoreAchieved};
                my $NumAchieved             = $retprogress->{$id}->{NumAchieved};

                my $GameTitle               = $JSON->[$X{$id}]->{Title};
                my $GameID                  = $JSON->[$X{$id}]->{GameID};

                if ( $ScoreAchievedHardcore > 0 )
                {
                    if ( $NumAchievedHardcore == $NumPossibleAchievements )
                    {
                        my $done = RAB::SQL::CheckGameIsDone($user_tw,$GameID,'hardcore');

                        if ( $done eq 'already_in_db')
                        { #We don't do this one
                        }
                        else
                        {
                            $mode        = 'hardcore';
                            $gamePercent = sprintf("%.0f", 100*$NumAchievedHardcore/$NumPossibleAchievements);
                            $kudos_end   = ' in HARDCORE !';
                            $goodtogo    = 'ok';
                            $score       = $ScoreAchievedHardcore;
                            $achieved    = $NumAchievedHardcore;
                        }
                    }
                }
                if ( $ScoreAchieved > 0 )
                {
                    if ( $NumAchievedHardcore < $NumPossibleAchievements )
                    {
                        if ( $NumAchieved == $NumPossibleAchievements )
                        {
                            my $done = RAB::SQL::CheckGameIsDone($user_tw,$GameID,'normal');

                            if ( $done eq 'already_in_db')
                            { #We don't do this one
                            }
                            else
                            {
                                $mode        = 'normal';
                                $gamePercent = sprintf("%.0f", 100*$NumAchieved/$NumPossibleAchievements);
                                $kudos_end   = ' !';
                                $goodtogo    = 'ok';
                                $score       = $ScoreAchieved;
                                $achieved    = $NumAchieved;
                            }
                        }
                        else
                        { # Game not finished, then no tweet
                        }
                    }
                    else
                    { # Game already completed in hardcore
                    }
                }

                if ( $goodtogo and $goodtogo eq 'ok' )
                {
                    RAB::Sprites::fetch($JSON->[$X{$id}]->{ImageIcon});
                    RAB::Sprites::create($user_tw, $GameID, $JSON->[$X{$id}]->{ImageIcon}, $gamePercent, $mode, $ScoreAchieved, $NumPossibleAchievements);

                    my $kudos  = "\@$user_tw Kudos, ";
                       $kudos .= "with $achieved/$NumPossibleAchievements Achievements unlocked, ";
                       $kudos .= "you completed $GameTitle ($JSON->[$X{$id}]->{ConsoleName})[$GameID]";
                       $kudos .= $kudos_end;
                    my $tweet = RAB::Twitter::FormatTweet($kudos);

                    # We send the tweet about the game
                    eval
                    {
                        RAB::Twitter::SendTweetMedia($tweet,"$spritesdir/img/$user_tw/$GameID.png");
                        logEntry( "[\@$user_tw:$user_ra]     RAB::Twitter::SendTweetMedia(...) DONE");
                    } or do {
                        my $error = $@ || 'Unknown failure';
                        chomp ($error);
                        logEntry("[\@$user_tw:$user_ra]     RAB::Twitter::SendTweetMedia(...) FAIL: $error");
                        # We next here to avoid marking a game in DB if tweet not sent
                        next;
                    };

                    # We mark the game as DONE in DB
                    eval
                    {
                        RAB::SQL::SetGameAsDone($user_tw,$GameID,$mode);
                        logEntry( "[\@$user_tw:$user_ra]     RAB::SQL::SetGameAsDone($user_tw,$GameID,$mode) DONE");
                    } or do {
                        my $error = $@ || 'Unknown failure';
                        chomp ($error);
                        logEntry("[\@$user_tw:$user_ra]     RAB::SQL::SetGameAsDone($user_tw,$GameID,$mode) FAIL: $error");
                    };
                }
            }
        }
    }
    # Loop is done, we sleep until next iteration
    sleep($sleepMainLoop);
}

# add a line to the log file
sub logEntry {
    my ($logText) = @_;
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
    my $dateTime = sprintf "%4d-%02d-%02d %02d:%02d:%02d |", $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
    if ($logging) {
        binmode(STDERR, ":utf8");
        print STDERR "$dateTime $logText\n";
    }
}

# catch signals and end the program if one is caught.
sub signalHandler {
    $dieNow = 1;    # this will cause the "infinite loop" to exit
}

# do this stuff when exit() is called.
END {
    if ($logging)
    {
        logEntry("Stopping daemon");
    }
}
